// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgres"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  logs          Logging[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum LoggingType {
  INFO
  WARN
  ERROR
}

model Logging {
  id      Int         @id @default(autoincrement())
  date    DateTime
  user    User?       @relation(fields: [userId], references: [id])
  userId  String?
  type    LoggingType
  message String
}

model Page {
  id          String              @id @default(uuid())
  url         String              @unique
  title       String
  description String
  settings    ComponentSettings[]
  categories  TimelineCategory[]
  isDeleted   Boolean             @default(false)
}

model ComponentSettings {
  id        Int           @id @default(autoincrement())
  component String
  data      EditableData?
  page      Page?         @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId    String?
  order     Int           @default(0)
  isDeleted Boolean       @default(false)
}

model EditableData {
  id         Int               @id @default(autoincrement())
  content    String
  properties String?
  settings   ComponentSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
  settingsId Int               @unique
}

model TimelineCategory {
  id        Int            @id @default(autoincrement())
  name      String         @unique
  page      Page?          @relation(fields: [pageId], references: [id])
  pageId    String?
  color     String?
  items     TimelineItem[]
  isDeleted Boolean        @default(false)
}

model TimelineItem {
  id          Int               @id @default(autoincrement())
  date        DateTime?
  endDate     DateTime?
  subcategory String?
  text        String
  links       String
  x           Float?
  y           Float?
  type        TimelineDateType
  category    TimelineCategory? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  isDeleted   Boolean           @default(false)
}

enum TimelineDateType {
  EXACT
  ESTIMATE_MONTH
  ESTIMATE_YEAR
}
